<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThingSpeak Online Status</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            grid-gap: 20px;
        }
        h1 {
            color: #333;
            grid-column: span 2;
        }
        p {
            margin-bottom: 20px;
            color: #777;
        }
        .online {
            color: green;
        }
        .offline {
            color: red;
        }
        .count {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
        .online-count {
            color: green;
        }
        .offline-count {
            color: red;
        }
        .progress-container {
            border: 2px solid purple;
            border-radius: 5px;
            overflow: hidden;
            height: 20px;
            margin: 10px 0;
        }
        .progress-bar {
            height: 100%;
            width: 0;
            background-color: green;
        }
        .offline-progress {
            background-color: red;
        }
        .device-container {
            height: 30vw;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 20px;
        }
        .count-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .count-item {
            margin-bottom: 10px;
        }
        .time-since-last-seen {
            margin-top: 10px;
            color: #777;
        }
        .time-since-last-seen span {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
</head>
<body>

    <div class="device-container">
        <h1>Online Status</h1>
        <p id="channelStatus"></p>
        <div class="time-since-last-seen" id="lastUpdateTime">
            <!-- Time since last update will be displayed here -->
        </div>
    </div>

    <div class="progress-container">
        <div class="progress-bar">
            <div class="offline-progress"></div>
        </div>
    </div>
    
    <div>
        <ul class="count-list">
            <li class="count-item">Online : <span id="onlineCount" class="online-count">0</span></li>
            <li class="count-item">Offline : <span id="offlineCount" class="offline-count">0</span></li>
            <li class="count-item"> Uptime: <span id="percentageUptime">0%</span></li>
        </ul>
    </div>

    <script>
        var channels = [
            { name: 'Mobile Airqo 2', id: 2346964 },
            { name: 'Mobile Airqo 3', id: 2346967 },
            { name: 'Mobile Airqo 4', id: 2346969 },
            { name: 'Mobile Airqo 5', id: 2346963 }
        ];

        var lastUpdateTimes = [];
        var onlineCount = 0;
        var offlineCount = 0;
        var channelsProcessed = 0;

        function fetchLastUpdateTime(channel, callback) {
            var apiEndpoint = 'https://api.thingspeak.com/channels/' + channel.id + '/feed.json';

            $.get(apiEndpoint, { results: 1 }, function(data) {
                if (data && data.feeds && data.feeds.length > 0) {
                    var lastUpdateTime = parseThingSpeakDate(data.feeds[0].created_at);
                    lastUpdateTimes.push({ name: channel.name, time: lastUpdateTime });
                } else {
                    lastUpdateTimes.push(undefined);
                }

                channelsProcessed++;

                if (channelsProcessed === channels.length) {
                    callback();
                }
            });
        }

        function parseThingSpeakDate(dateString) {
            var parts = dateString.split(/[-T:Z]/);
            return new Date(Date.UTC(parts[0], parts[1]-1, parts[2], parts[3], parts[4], parts[5]));
        }

        function calculatePercentageUptime() {
            var totalDevices = onlineCount + offlineCount;
            var percentageUptime = totalDevices > 0 ? (onlineCount / totalDevices) * 100 : 0;

            $('#percentageUptime').text(percentageUptime.toFixed(2) + '%');
        }






function displayTimeSinceLastSeen(lastUpdateTime) {
    var currentTime = new Date();
    var timeDifference = currentTime - lastUpdateTime;
    var minutesAgo = Math.floor(timeDifference / (1000 * 60));
    var hoursAgo = Math.floor(timeDifference / (1000 * 60 * 60));
    var daysAgo = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

    var agoString = '';

    if (daysAgo > 0) {
        agoString = daysAgo + (daysAgo === 1 ? ' day' : ' days') + ' ago';
    } else if (hoursAgo > 0) {
        agoString = hoursAgo + (hoursAgo === 1 ? ' hour' : ' hours') + ' ago';
    } else {
        agoString = minutesAgo + (minutesAgo === 1 ? ' minute' : ' minutes') + ' ago';
    }

    return agoString;
}




        function displayChannelStatus() {
            lastUpdateTimes.forEach(function(updateInfo) {
                if (updateInfo) {
                    var channelName = updateInfo.name;
                    var lastUpdateTime = updateInfo.time;
                    var currentTime = new Date();
                    
                    var timeDifference = currentTime - lastUpdateTime;
                    var hoursAgo = Math.floor(timeDifference / (1000 * 60 * 60));

                    var statusClass = hoursAgo > 6 ? 'offline' : 'online';
                    var statusText = hoursAgo > 6 ? 'Offline' : 'Online';
                    var lastSeenText = 'Last Seen ' + lastUpdateTime.toLocaleString() + ' ago ' ;
                    var timeSinceLastSeen = displayTimeSinceLastSeen(lastUpdateTime);

                    $('#channelStatus').append(channelName + ': <span class="' + statusClass + '">' + statusText  + timeSinceLastSeen + '</span><br>');
                    
                    if (hoursAgo > 6) {
                        offlineCount++;
                    } else {
                        onlineCount++;
                    }
                } else {
                    $('#channelStatus').append(channel.name + ': No data available<br>');
                }
            });

            $('#onlineCount').text(onlineCount);
            $('#offlineCount').text(offlineCount);

            calculatePercentageUptime();
            updateProgressBar();
        }

        function updateProgressBar() {
            var totalDevices = onlineCount + offlineCount;
            var onlinePercentage = (onlineCount / totalDevices) * 100;
            var offlinePercentage = (offlineCount / totalDevices) * 100;

            $('.progress-bar').css('width', onlinePercentage + '%');
            $('.offline-progress').css('width', offlinePercentage + '%');
        }

        channels.forEach(function(channel) {
            fetchLastUpdateTime(channel, displayChannelStatus);
        });
    </script>

</body>
</html>
